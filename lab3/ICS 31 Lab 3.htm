<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!-- saved from url=(0051)http://www.ics.uci.edu/~kay/courses/31/hw/lab3.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="GENERATOR" content="Globetrotter 1.1.1">
<meta http-equiv="UPDATED" content="Tuesday, November 22, 2005 9:30 AM">
<title>ICS 31 Lab 3</title>
<meta http-equiv="X-GLOBETROTTERDATA" content="33CB8976">
<meta http-equiv="DESCRIPTION" content="Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine.">
<meta http-equiv="COPYRIGHT" content="Copyright © 2001-2004 by David G. Kay.  All rights reserved.">
<link href="./ICS 31 Lab 3_files/mainstyle.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#FFFFFF">
<p><font size="2">ICS 31 • DAVID G. KAY • UC IRVINE • FALL 2012</font></p>
<p><font size="6"><b>Lab Assignment 3 </b></font>
</p>
<p><font>This assignment is due at the end of lab on Friday, October 19</font>. Since we have a midterm Thursday, there's not much new material here.</p>
<p><font><strong>Preparation</strong></font> (Do this part individually, before coming to lab)</p>
<p><font><strong>(1)</strong> If you're just getting enrolled in the class, do everything on the course refrence sheet (the syllabus) under the heading "What to do this week to get started in ICS 31." This includes registering yourself at <a href="http://checkmate.ics.uci.edu/"><code>checkmate.ics.uci.edu</code></a> and <a href="https://piazza.com/uci/fall2012/ics31"><code>piazza.com</code></a>, filling out the questionnaire at <a href="http://eee.uci.edu/survey/ics31.f12.q"><code>eee.uci.edu/survey/ics31.f12.q</code></a>, and turning in your photo to your TA.
</font></p>
<p><strong>(2) </strong>Read sections 3.1, 3.2,  and 3.6 of the Perkovic text, trying the practice problems (before looking at the solutions). We have already worked with assignment statements and distinguished some data structures as immutable while others are mutable. Section 3.4 explores these issues further, but we recommend skipping that section until after the midterm.</p>
<p>In section 3.2, look at the flowchart diagrams. They're a good way to visualize the semantics (meaning, behavior) of the control structures.</p>
<p><strong>(3) </strong>Become comfortable with the terminology of functions: function definitions, function calling, arguments (the values you call the functions with), parameters (the names of those values inside the function, defined in the function header/signature/<code>def</code> line), what it means when we say a function "takes a number and a string", what it means for a function to return a value, the difference between defining a function and calling it.</p>
<p><strong>(4) </strong>Read through the Lab Work part of this assignment before you come to lab on Monday. This will give you an idea of what you'll be doing with your partner, but it also contains a variety of explanations of important course material, things you'll need for the assignment, quizzes, and exams. We won't bother repeating this instruction in  next week's lab (or thereafter), but of course you should continue to follow it.</p>
<p>&nbsp;</p>
<p><font><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>
<p><strong>(a)</strong> Choose a partner for this assignment and make sure the TA knows who your partner is. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. </p>
<p><strong>(b)</strong> 
For this assignment, you will create a Python file called <code>lab3.py</code>. Type your answers to all the parts of this assignment into this file; non-Python text can be in comments or multi-line (triple-quoted) strings.</p>
<p>On the first line of the file type a comment with the names and IDs of both partners and some other identifying information, like this: </p>
<pre> #  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 3.
</pre>
<p>The Python code in your file should produce the specified results when you run the file. When you've finished the assignment, you'll submit this file via Checkmate. (It's a good idea if each partner keeps a copy of the lab work at the end of each session, just in case someone can't make it to the next lab.)</p>
<p>We won't bother repeating these instructions in later lab assignments, but unless we specify otherwise you should still prepare your lab work this way.</p>
<p><strong>(c)</strong> Do exercises 3.17, 3.18, 3.19, and 3.20.</p>
<p><strong>(d.1)</strong> Write a function called <code>is_vowel</code> that takes a

 one-character-long string and returns True if that character is a vowel and False otherwise. [A vowel, for our purposes here, is one of the letters a, e, i, o, or u (lower case or upper case).] Page 67 of the textbook shows how to compute this; your task here is to package this up into a function that returns a boolean value.</p>
<p>Your function definition should follow the "design recipe" pattern we described in class:</p>
<ul>
  <li>The function header should indicate the type(s) of the parameter(s) and return value (e.g., <code>def double (n: int) -&gt; int:</code>)</li>
  <li>The first line of the function should be a docstring describing the function's purpose (e.g., <code>" Return twice the value of the parameter "</code>).  Regular quotation marks are fine for one-line comments; you need triple-quotes if your docstring extends over two or more lines.</li>
  <li>You should write some examples of calling your function and the results you expect it to return; one way to do this is in print statements (e.g., <code>print(double(7), "should be 14")</code> and <code>print(double(0), "should be 0")</code>)</li>
</ul>
<p>You should do all of this <em>before</em> you write the code for the body of the function (which follows the pattern on page 67 of the text).
 And we expect you to do this for every function you write from now on. If you ask a TA or tutor for help and you haven't done it, they'll just send you back to do it. (Of course, if you have questions about <em>how</em> to do this, they'll be glad to help.)

</p><p>[Novice programmers are often tempted to code the body of this task as 
</p><pre>if ... :  
    return True
else:
    return False</pre>    
<p>But this is rather clumsy and redundant, because the boolean expression itself (the "<code>...</code>" above)
  has exactly the value you want to return; you should just say <code>return ...</code> and be done.]</p>
<p>Finally, run your code (including the tests) to make sure the tests all pass.  This is the pattern you will follow for every function you design and code.</p>
<p><strong>(d.2)</strong> Write a function called <code>print_nonvowels</code> that takes a string and prints out all the characters in the string that are <em>not</em> vowels. Use your <code>is_vowel</code> function (and one of the logical/boolean operators).  (Note that this function prints its result rather than returning it.  Whenever you define a function, the first thing to determine is whether the result should be returned or printed. When in doubt, return the value and let the program that called the function decide what to do with it. For class purposes, we'll typically just tell you which to do, as we did here.)  This task is related but not identical to the tasks described on page 67.</p>
<p>Write some tests, enough so that if they pass, you're convinced that your function works correctly. And run the tests, of course.</p>
<p><strong>(d.3)</strong> Write a function called <code>nonvowels</code> that takes a string and <em>returns</em> a string containing all the characters in the parameter string that are <em>not</em> vowels. Since you're returning a string instead of printing a character at a time, you'll need to construct that string in your function. Start with a variable (let's call it <code>result</code>) whose value is the empty string. Each time you find a nonvowel, add it to the end of <code>result</code>. Then, once you've gone through the whole parameter, <code>result</code> is what you return.</p>
<p>Functions that return values are somewhat more convenient to test than functions that print values. You could do it the same way, printing out the tests and the results or printing out boolean expresions that are true if the test passes. Instead of print statements, though, you can use <code>assert</code> statements as shown below. Their advantage is that if the test passes, nothing happens, so you can leave the <code>assert</code> statements in your code after you're satisfied your function works, without their cluttering up your output. (It's good to keep the <code>assert</code> statements there because later you may make changes that "break" your existing code, or you may need to change your existing code, and with the tests still in place you'll find any problems at the soonest possible time.)</p>
<p>Here are some <code>assert</code> statements for <code>double</code> and for <code>is_vowel</code>; note that the argument to <code>assert</code> is a boolean expression.</p>
<pre>assert(double(0) == 0)
assert(double(17.5) == 35)
assert(double(-223344) == -446688)
assert(is_vowel('a'))
assert(is_vowel('U'))
assert(not is_vowel('X'))
assert(not is_vowel('?'))</pre>
<p>To see what happens when a test fails, <code>assert</code> something false like <code>assert(double(2)==5)</code>. (Note that when an assertion fails, there could be  two reasons: (i) Your function may be incorrect, or (ii) your assertion—what you think the right answer is—may be wrong. You should consider both possibilities).</p>
<p>Write some tests for <code>nonvowels</code> using <code>assert</code> statements.</p>
<p><strong>(d.4)</strong> Write a function called <code>consonants</code> that takes a string and returns a string containing all the letters in the parameter string that are not vowels. (This is not the same as <code>nonvowels</code>, whose definition refers to "characters," which include digits and spaces and punctuation. Did you test <code>nonvowels</code> with strings including non-letters? If not, go back and do it, changing the function's definition if necessary to make it work correctly.)</p>
<p>Before you write the body of the function, follow the "design recipe" steps: specify the types of the parameter and return value; include a short purpose statement as a docstring; write examples in the form of <code>assert</code> statements.</p>
<p><strong>(d.5)</strong> Write a function called <code>select_letters</code> that takes two strings and returns a string. If the first parameter is <code>'v'</code>, it returns a string containing all the vowels in the second parameter; if the first parameter is <code>'c'</code>, it returns a string containing all the consonants in the second parameter. If the first parameter is anything else, it returns the empty string.</p>
<p><strong>(d.6)</strong> Write a function called <code>hide_vowels</code> that takes a string and returns a string in which every vowel in the parameter is replaced with a hyphen ("<code>-</code>") and all other characters remain unchanged. After your testing shows that it's correct, try running it with a couple of sentences; you may be able to understand the sentences even with all the vowels hidden.</p>
<p><strong>(e)</strong> Do two of Exercises 3.22, 3.23, and 3.24.</p>
<p><strong>(f)</strong> You can download code from <a href="http://www.ics.uci.edu/~kay/python/restaurants.py">http://www.ics.uci.edu/~kay/python/restaurants.py</a> that defines a list called <code>RL</code> that contains 26 Restaurant objects.</p>
<p>(In that file, each of the 26 restaurants is given an individual variable name, <code>R1</code> through <code>R26</code>. That is not necessary; we could create the list of restaurants as we did in Lab Assignment 2, by putting 26 calls to <code>Restaurant()</code> within square brackets. But having individual variable names makes constructing tests more convenient; we can say, e.g., <code>assert(cheapest(RL) == R10)</code>.)</p>
<p>Paste the code into your <code>lab3.py</code> file.</p>
<p><strong>(f.1)</strong> Write a function called <code>alphabetical</code> that takes a list of restaurants and returns that list in alphabetical order by name. Except for making this a function, you did this task in last week's lab.</p>
<p><strong>(f.2) </strong>Write a function called <code>alphabetical_names</code> that takes a list of restaurants and returns a list of the <em>names</em> of all the restaurants in alphabetical order by name. [One of the things you learn in this course is to read technical documents very closely. Part (f.1) asked for a list of restaurants; this part asks for a list of strings, with each string the name of a restaurant.]</p>
<p><strong>(f.3) </strong>Write a function called <code>all_Thai</code> that takes a list of restaurants and returns a list of all the Thai restaurants (i.e., whose cuisine attribute is Thai). The body of the function follows the same pattern as your vowel-selecting function above. Recognizing these similar patterns is a programming skill you will develop.</p>
<p><strong>(f.4) </strong>Write a function called<code> select_cuisine </code>that takes a list of restaurants and a string representing a cuisine. It should return a list of all the restaurants that serve the specified cuisine.</p>
<p><strong>(f.5)</strong> Write a function called <code>select_cheaper</code> that takes a list of restaurants and a number (a float) and returns a list of all the restaurants whose price is less than the specified number.</p>
<p><strong>(f.6) </strong>Write a function called <code>average_price</code> that takes a list of restaurants and returns the average price of (the best dishes at) those restaurants. (You may wish to write a separate function that takes a list of restaurants and returns the sum of the prices of (the best dishes at) those restaurants. But that's not required.)</p>
<p><strong>(f.7) </strong>Write a print statement that calls one or more of the functions you defined above to print the average price of the Indian restaurants in the list <code>RL</code>.</p>
<p><strong>(f.8) </strong>Write a print statement that calls one or more of the functions you defined above to print the average price at the Chinese and Thai restaurants (taken as one group) in the list <code>RL</code>. </p>
<p><strong>(f.9) </strong>Write a print statement that calls one or more of the functions you defined above to print a list of the names of all the restaurants in RL with a price under $15.00.</p>
<p><strong>(g)</strong> If you or your partner didn't finish Lab 2 and you have time available this week, work together to finish any problems that either of you left unfinished last week. You may use either partner's work from last week for reference, but of course the point is that both of you understand your solutions. This is more for experience and learning than for additional credit, but of course if you become more proficient, you will get higher scores on later assignments and exams.</p>
<p><strong>(h)</strong><strong></strong> Remember that each partner must complete a partner evaluation form and submit it individually. Do this by connecting to eee.uci.edu and choosing the Survey tool for your lab section of ICS 31. Make sure you know your partner's name, first and last, so you can evaluate the right person. Please complete your evaluation by the end of the day on Friday, or Saturday morning at the latest. It only takes a couple of minutes and not doing it hurts your participation score.
  
</p><p><strong>What to turn in:</strong> Submit via Checkmate your  <code>lab3.py</code> file containing your solutions to parts (c) through (g). It would be an excellent idea to go back and re-read those parts carefully now, to make sure you've completed all the steps specified. It would also be an excellent idea to run your file one last time to make sure all the correct results appear, with no error messages.  (If you run into problems, it's probably because you have more than one function with the same name. Change one of the names [everywhere necessary] and try to Run again.)</p>
<p>Also remember that each student must complete a partner evaluation form by logging in to eee.uci.edu and selecting the Survey tool; these evaluations contribute to your class participation score. Get in the habit of doing this every week on Friday after you've submitted your assignment; the survey closes on Saturday.
  
</p><p style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; ">&nbsp;</p>
<p style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; "><font face="Helvetica" size="1">Written by David G. Kay in Fall 2012 for ICS 31.</font></p>
<br class="Apple-interchange-newline">
<hr>
<font><a href="http://www.ics.uci.edu/~kay/">David G. Kay</a>, <a href="mailto:kay@uci.edu">kay@uci.edu</a> </font><span><br>
<font size="2">
<!-- #BeginDate format:fcAm1a -->Saturday, October 20, 2012 9:34 AM<!-- #EndDate -->
</font></span>


</body></html>