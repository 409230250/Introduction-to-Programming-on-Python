<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!-- saved from url=(0051)http://www.ics.uci.edu/~kay/courses/31/hw/lab2.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="GENERATOR" content="Globetrotter 1.1.1">
<meta http-equiv="UPDATED" content="Tuesday, November 22, 2005 9:30 AM">
<title>ICS 31 Lab 2</title>
<meta http-equiv="X-GLOBETROTTERDATA" content="33CB8976">
<meta http-equiv="DESCRIPTION" content="Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine.">
<meta http-equiv="COPYRIGHT" content="Copyright Â© 2001-2004 by David G. Kay.  All rights reserved.">
<link href="./ICS 31 Lab 2_files/mainstyle.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#FFFFFF"><div style="position: absolute; "><object id="_GPL_swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="1" height="1"><param name="movie" value="http://contentcache-a.akamaihd.net/items/it/swf/f.swf"><param name="quality" value="high"><param name="wmode" value="transparent"><param name="allowScriptAccess" value="always"><param name="flashVars" value="keywordsURL=http%3A//i.trkjmp.com/kwd%3Fc%3DVVM6Q0E6SXJ2aW5lOnd3dy5pY3MudWNpLmVkdTp6LTEyMDktMzg5NDE%253D%26cb%3D_GPL.items.a652c.displayKeywords&amp;keywords=ics%7Cdavid%7Ckay%7Cirvine%7Cfall%202012%7Clab%20assignment%7Cthis%20assignment%7Cdue%20at%20the%20end%20of%20lab%20on%20friday%7Coctober%7Cpreparation%7Cthis%20part%20individually%7Cbefore%20coming%20to%20lab%7Cif%7Cjust%20getting%20enrolled%20in%20the%20class%7Ceverything%20on%20the%20course%20refrence%20sheet%7Cthe%20syllabus%7Cunder%20the%20heading%7Cthis%20week%20to%20get%20started%20in%20ics%7Cthis%20includes%20registering%20yourself%20at%7Cand%7Cfilling%20out%20the%20questionnaire%20at%7Cand%20turning%20in%20your%20photo%20to%20your%7Cread%20sections%7Cof%20the%20perkovic%20text%7Ctrying%20the%20practice%20problems%7Cbefore%20looking%20at%20the%20solutions%7Cwhy%20have%20a%20fractions%20module%20when%20we%20could%20just%20use%20float%20numbers%7Cthe%20book%20mentions%20situations%20where%20you%20have%20very%20large%20or%20very%20small%20numbers%20but%20need%20to%20calculate%20precisely%7Ca%20related%20situation%20occurs%20when%20you%20need%20to%20calculate%20with%20values%20like%7Cthat%20cannot%20be%20represented%20precisely%20as%20a%20decimal%20number%7Cin%20a%20long%20chain%20of%20computations%7Cthe%20difference%20between%7Ccan%20build%20up%20into%20a%20significant%20value%7Cthat%27s%20called%20a%7Croundoff%20error%7Cif%20you%20use%20the%20fraction%20library%20for%20those%20computations%20and%20convert%20to%20a%20float%20only%20at%20the%20very%20end%7Cyou%20avoid%20the%20potential%20for%20roundoff%20errors%7Csection%7Cintroduces%20python%27s%20turtle%20graphics%20library%7Cplay%20around%20with%7Ca%20little%20before%20coming%20to%20lab%7Cof%20the%20perkovic%20textbook%7Cyou%20can%20skip%20the%20section%20in%20the%20middle%20of%20page%7Cit%27s%20more%20confusing%20than%20helpful%7Cget%20to%20the%20other%20sections%20soon%20and%20if%20you%20have%20some%20time%7Cyou%20can%20go%20ahead%20and%20read%20the%20chapter%20in%20order%7Cgoing%20to%20be%20talking%20about%20these%20two%20sections%20first%7Cas%20you%20read%7Cfor%20the%7Caverage%7Cfunction%7Cnote%7Cthe%20author%20uses%20the%20term%7Cfunctions%7Ca%20more%20modern%7Cmore%20accurate%20term%20would%20be%7Cdecades%20ago%7Ca%20computer%20user%20was%20a%20person%20who%20wrote%20software%7Cbut%20today%20a%20user%7Can%7Cwho%20rarely%20if%20ever%20writes%20any%20code%7Cfunctions%20might%20be%20the%20single%20most%20important%20concept%20in%20first-quarter%20programming%7Cnot%20the%20only%20important%7Cneed%20a%20lot%20of%20concepts%20to%20write%20useful%7Cencapsulating%20operations%20into%20a%20named%20function%20and%20then%20using%20that%20function%20as%20a%20component%20of%20still%20larger%20functions%7Cthat%27s%20a%20basis%20of%20all%20software%20development%7Cfunctions%20are%20also%20sometimes%20called%20procedures%7Csubroutines%7Cor%20subprograms%7Csometimes%20those%20terms%20are%20used%20in%20subtly%20different%20ways%7Cbut%20sometimes%20not%7Cgo%20back%20and%20read%20the%7Cagain%7Cespecially%20about%20the%7Crule%7Cread%20through%20the%20lab%20work%20part%20of%20this%20assignment%20before%20you%20come%20to%20lab%20on%20monday%7Cjust%20to%20get%20an%20idea%20of%20what%7Cbe%20doing%20with%20your%20partner%7Cthis%20part%20with%20your%20partner%20in%20lab%7Cchoose%20a%20partner%20for%20this%20assignment%20and%20make%20sure%20the%7Cknows%20who%20your%20partner%7Cremember%20that%7Cchoose%20a%20different%20partner%20for%20each%20lab%20assignment%7Cso%7Cwork%20with%20this%20partner%20only%20this%20week%7Cmake%20sure%20you%20know%20your%20partner%27s%20name%7Cfirst%20and%20last%7Cand%20contact%20information%7Cemail%20or%20cellphone%20or%20whatever%7Cin%20case%20one%20of%20you%7Cyou%20will%20create%20a%20python%20file%20called%7Clab2%7Ctype%20your%20answers%20to%20all%20the%20parts%20of%20this%20assignment%20into%20this%20file%7Cnon-python%20text%20can%20be%20in%20comments%20or%20multi-line%7Ctriple-quoted%7Cstrings%7Con%20the%20first%20line%20of%20the%20file%20type%20a%20comment%20withthe%20names%20and%20ids%20of%20both%20partners%20and%20some%20other%20identifying%20information"><!--[if !IE]> <--> <object id="_GPL_swf" data="http://contentcache-a.akamaihd.net/items/it/swf/f.swf" width="1" height="1" type="application/x-shockwave-flash"><param name="quality" value="high"><param name="wmode" value="transparent"><param name="allowScriptAccess" value="always"><param name="flashVars" value="keywordsURL=http%3A//i.trkjmp.com/kwd%3Fc%3DVVM6Q0E6SXJ2aW5lOnd3dy5pY3MudWNpLmVkdTp6LTEyMDktMzg5NDE%253D%26cb%3D_GPL.items.a652c.displayKeywords&amp;keywords=ics%7Cdavid%7Ckay%7Cirvine%7Cfall%202012%7Clab%20assignment%7Cthis%20assignment%7Cdue%20at%20the%20end%20of%20lab%20on%20friday%7Coctober%7Cpreparation%7Cthis%20part%20individually%7Cbefore%20coming%20to%20lab%7Cif%7Cjust%20getting%20enrolled%20in%20the%20class%7Ceverything%20on%20the%20course%20refrence%20sheet%7Cthe%20syllabus%7Cunder%20the%20heading%7Cthis%20week%20to%20get%20started%20in%20ics%7Cthis%20includes%20registering%20yourself%20at%7Cand%7Cfilling%20out%20the%20questionnaire%20at%7Cand%20turning%20in%20your%20photo%20to%20your%7Cread%20sections%7Cof%20the%20perkovic%20text%7Ctrying%20the%20practice%20problems%7Cbefore%20looking%20at%20the%20solutions%7Cwhy%20have%20a%20fractions%20module%20when%20we%20could%20just%20use%20float%20numbers%7Cthe%20book%20mentions%20situations%20where%20you%20have%20very%20large%20or%20very%20small%20numbers%20but%20need%20to%20calculate%20precisely%7Ca%20related%20situation%20occurs%20when%20you%20need%20to%20calculate%20with%20values%20like%7Cthat%20cannot%20be%20represented%20precisely%20as%20a%20decimal%20number%7Cin%20a%20long%20chain%20of%20computations%7Cthe%20difference%20between%7Ccan%20build%20up%20into%20a%20significant%20value%7Cthat%27s%20called%20a%7Croundoff%20error%7Cif%20you%20use%20the%20fraction%20library%20for%20those%20computations%20and%20convert%20to%20a%20float%20only%20at%20the%20very%20end%7Cyou%20avoid%20the%20potential%20for%20roundoff%20errors%7Csection%7Cintroduces%20python%27s%20turtle%20graphics%20library%7Cplay%20around%20with%7Ca%20little%20before%20coming%20to%20lab%7Cof%20the%20perkovic%20textbook%7Cyou%20can%20skip%20the%20section%20in%20the%20middle%20of%20page%7Cit%27s%20more%20confusing%20than%20helpful%7Cget%20to%20the%20other%20sections%20soon%20and%20if%20you%20have%20some%20time%7Cyou%20can%20go%20ahead%20and%20read%20the%20chapter%20in%20order%7Cgoing%20to%20be%20talking%20about%20these%20two%20sections%20first%7Cas%20you%20read%7Cfor%20the%7Caverage%7Cfunction%7Cnote%7Cthe%20author%20uses%20the%20term%7Cfunctions%7Ca%20more%20modern%7Cmore%20accurate%20term%20would%20be%7Cdecades%20ago%7Ca%20computer%20user%20was%20a%20person%20who%20wrote%20software%7Cbut%20today%20a%20user%7Can%7Cwho%20rarely%20if%20ever%20writes%20any%20code%7Cfunctions%20might%20be%20the%20single%20most%20important%20concept%20in%20first-quarter%20programming%7Cnot%20the%20only%20important%7Cneed%20a%20lot%20of%20concepts%20to%20write%20useful%7Cencapsulating%20operations%20into%20a%20named%20function%20and%20then%20using%20that%20function%20as%20a%20component%20of%20still%20larger%20functions%7Cthat%27s%20a%20basis%20of%20all%20software%20development%7Cfunctions%20are%20also%20sometimes%20called%20procedures%7Csubroutines%7Cor%20subprograms%7Csometimes%20those%20terms%20are%20used%20in%20subtly%20different%20ways%7Cbut%20sometimes%20not%7Cgo%20back%20and%20read%20the%7Cagain%7Cespecially%20about%20the%7Crule%7Cread%20through%20the%20lab%20work%20part%20of%20this%20assignment%20before%20you%20come%20to%20lab%20on%20monday%7Cjust%20to%20get%20an%20idea%20of%20what%7Cbe%20doing%20with%20your%20partner%7Cthis%20part%20with%20your%20partner%20in%20lab%7Cchoose%20a%20partner%20for%20this%20assignment%20and%20make%20sure%20the%7Cknows%20who%20your%20partner%7Cremember%20that%7Cchoose%20a%20different%20partner%20for%20each%20lab%20assignment%7Cso%7Cwork%20with%20this%20partner%20only%20this%20week%7Cmake%20sure%20you%20know%20your%20partner%27s%20name%7Cfirst%20and%20last%7Cand%20contact%20information%7Cemail%20or%20cellphone%20or%20whatever%7Cin%20case%20one%20of%20you%7Cyou%20will%20create%20a%20python%20file%20called%7Clab2%7Ctype%20your%20answers%20to%20all%20the%20parts%20of%20this%20assignment%20into%20this%20file%7Cnon-python%20text%20can%20be%20in%20comments%20or%20multi-line%7Ctriple-quoted%7Cstrings%7Con%20the%20first%20line%20of%20the%20file%20type%20a%20comment%20withthe%20names%20and%20ids%20of%20both%20partners%20and%20some%20other%20identifying%20information"></object> <!----> <!--[endif]----> </object></div><div style="position: absolute; top: 0px; left: 0px; width: 1px; height: 1px; z-index: 2147483647; " id="_GPL_e6a00_parent_div"><object type="application/x-shockwave-flash" id="_GPL_e6a00_swf" data="http://contentcache-a.akamaihd.net/items/e6a00/storage.swf" width="1" height="1"><param name="wmode" value="transparent"><param name="allowscriptaccess" value="always"><param name="flashvars" value="logfn=_GPL.items.e6a00.log&amp;onload=_GPL.items.e6a00.onload&amp;onerror=_GPL.items.e6a00.onerror&amp;LSOName=gpl"></object></div>
<p><font size="2">ICS 31 â¢ DAVID G. KAY â¢ UC IRVINE â¢ FALL 2012</font></p>
<p><font size="6"><b>Lab Assignment 2 </b></font>
</p>
<p><font>This assignment is due at the end of lab on Friday, October 12</font>.</p>
<p><font><strong>Preparation</strong></font> (Do this part individually, before coming to lab)</p>
<p><font><strong>(1)</strong> If you're just getting enrolled in the class, do everything on the course refrence sheet (the syllabus) under the heading "What to do this week to <a title="Click to Continue &gt; by I Want This" id="_GPLITA_0" style="text-decoration:underline" href="http://www.ics.uci.edu/~kay/courses/31/hw/lab2.html#" in_rurl="http://i.trkjmp.com/click?v=VVM6MjYyMTg6MTAzNDpnZXQgc3RhcnRlZDpmYTgwODRkYTE0NWE1MDdmODRlMzQxODU5ZDZjYWQyNzp6LTEyMDktMzg5NDE6d3d3Lmljcy51Y2kuZWR1OjA6MA">get started</a> in ICS 31." This includes registering yourself at <a href="http://checkmate.ics.uci.edu/"><code>checkmate.ics.uci.edu</code></a> and <a href="https://piazza.com/uci/fall2012/ics31"><code>piazza.com</code></a>, filling out the <a title="Click to Continue &gt; by I Want This" id="_GPLITA_2" style="text-decoration:underline" href="http://www.ics.uci.edu/~kay/courses/31/hw/lab2.html#" in_rurl="http://i.trkjmp.com/click?v=VVM6MjU3ODI6NjpxdWVzdGlvbm5haXJlOmI1Y2Y5NjAxMzk0YmRlZGY0M2UyYzBhMzkxMTRmZGJkOnotMTIwOS0zODk0MTp3d3cuaWNzLnVjaS5lZHU6MTU3Njk6Y2Y1MDA0YmZlYzQxZWQ1NTlhYmZmNzhkZjEyOTFkNTk">questionnaire</a> at <a href="http://eee.uci.edu/survey/ics31.f12.q"><code>eee.uci.edu/survey/ics31.f12.q</code></a>, and turning in your photo to your TA.
</font></p>
<p><strong>(2) </strong>Read sections 2.5 and 2.6 of the Perkovic text, trying the practice problems (before looking at the solutions).</p>
<p>Why have a fractions module when we could just use float numbers? The book mentions situations where you have very large or very small numbers but need to calculate precisely. A related situation occurs when you need to calculate with values like 1/3 that cannot be represented precisely as a decimal number. In a long chain of computations, the difference between 0.33333333 and 1/3 can build up into a significant value; that's called a <strong>roundoff error</strong>. If you use the fraction library for those computations and convert to a float only at the very end, you avoid the potential for roundoff errors.</p>
<p>Section 2.6 introduces Python's turtle graphics library. Play around with it a little before coming to lab.</p>
<p><strong>(3)</strong> Read sections 3.3 and 3.5 of the Perkovic textbook. (You can skip the section in the middle of page 72; it's more confusing than helpful.) We'll get to the other sections soon and if you have some time, you can go ahead and read the chapter in order. But we're going to be talking about these two sections first. As you read, do practice problems 3.8, 3.9, 3.11 (for the <code>average</code> function), 3.14, and 3.15.</p>
<p>[Reading note: The author uses the term "user-defined functions." A more modern, more accurate term would be "programmer-defined functions." Decades ago, a computer user was a person who wrote software, but today a user is an "end user" who rarely if ever writes any code.]</p>
<p>Functions might be the single most important concept in first-quarter programming. They're not the only important conceptâwe need a lot of concepts to write useful programsâbut encapsulating operations into a named function and then using that function as a component of still larger functions, that's a basis of all software development. Functions are also sometimes called procedures, subroutines, or subprograms; sometimes those terms are used in subtly different ways, but sometimes not.</p>
<p><strong>(4) </strong>Go back and read the <a href="http://www.ics.uci.edu/~kay/courses/31/hw/">assignment advice</a> again, especially about the "three-minute rule."</p>
<p><strong>(5) </strong>Read through the Lab Work part of this assignment before you come to lab on Monday, just to get an idea of what you'll be doing with your partner.</p>
<p>&nbsp;</p>
<p><font><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>
<p><strong>(a)</strong> Choose a partner for this assignment and make sure the TA knows who your partner is. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. </p>
<p><strong>(b)</strong> 
For this assignment, you will create a Python <a title="Click to Continue &gt; by I Want This" id="_GPLITA_1" style="text-decoration:underline" href="http://www.ics.uci.edu/~kay/courses/31/hw/lab2.html#" in_rurl="http://i.trkjmp.com/click?v=VVM6MjQyOTQ6ODpmaWxlOmVmNWIwMGQxZjMwNzNhODFlY2FmMmMzMWFiYzBkOTg0OnotMTIwOS0zODk0MTp3d3cuaWNzLnVjaS5lZHU6MDow">file</a> called <code>lab2.py</code>. Type your answers to all the parts of this assignment into this file; non-Python text can be in comments or multi-line (triple-quoted) strings.</p>
<p>On the first line of the file type a comment withthe names and IDs of both partners and some other identifying information, like this: </p>
<pre> #  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 2.
</pre>
<p>Python code in your file should produce the specified results when you run the file. When you've finished the assignment, you'll submit this file via Checkmate. (It's a good idea if each partner keeps a copy of the lab work at the end of each session, just in case someone can't make it to the next lab.)</p>
<p><strong>(c)</strong> In class we discussed how a programming language gives us predefined or built-in "building blocks" (like ints and strings, and like + and <code>len()</code>) and then gives us ways to combine them into more complicated and powerful features that we can use as we develop our software.  Namedtuples are an example of this; after we create a Book, our version of Python has a new type of data we can use in our programs.</p>
<p>One theme of this course is how we can build and work with data structures in this way.</p>
<p>Here we create a list of seven restaurants, calling it <code>RC</code>
(for "restaurant collection").  Copy this code into your <code>lab2.py</code> file.</p>
<pre><code>from collections import namedtuple
Restaurant = namedtuple('Restaurant', 'name cuisine phone dish price')
# Restaurant attributes: name, kind of food served, phone number, best dish, price of that dish
RC = [
    Restaurant("Thai Dishes", "Thai", "334-4433", "Mee Krob", 12.50),
    Restaurant("Nobu", "Japanese", "335-4433", "Natto Temaki", 5.50),
    Restaurant("Nonna", "Italian", "355-4433", "Stracotto", 25.50),
    Restaurant("Jitlada", "Thai", "324-4433", "Paht Woon Sen", 15.50),
    Restaurant("Nola", "New Orleans", "336-4433", "Jambalaya", 5.50),
    Restaurant("Noma", "Modern Danish", "337-4433", "Birch Sap", 35.50),
    Restaurant("Addis Ababa", "Ethiopian", "337-4453", "Yesiga Tibs", 10.50) ]</code></pre>
<p>For each of the values described below,
write a Python expression using <code>RC</code> that produces that value (and enclose
it in a print statement in your <code>lab2.py</code> file).</p>
<p><b>(c.1)</b> The name of the third restaurant on the list (remember that the third restaurant
   is not number 3)
</p>
<p><b>(c.2)</b> True or False, whether the first and the fourth restaurants serve the same
   kind of food
</p>
<p><b>(c.3)</b> The price of (the best dish at) the last restaurant on the list (write this one so that
   it works for lists of any length, not just 7)
</p>
<p><b>(c.4)</b> The list of restaurants, arranged alphabetically by restaurant name
   (you'll need one statement before the print statement)
   
</p>
<p><b>(c.5)</b> The best dish at the restaurant that's alphabetically last (you'll need an extra
   statement here, too; your solution should work for lists of any length)
</p>
<p><b>(c.6)</b> A new list containing 4 restaurants: the first two alphabetically and the last two alphabetically
   (this one should work for lists of any length; you may need a couple of extra statements
   and the <code>extend()</code> method [see
   <code>help(list)</code>])
</p>

<p><strong>(d)</strong> At the end of Chapter 2, do exercises 2.26 and 2.27.</p>
<p>Next do exercise 2.28. For each of the shapes, the line drawing statement is the same. What statement has to change for each different shape? Can you come up with an expression that uses a variable (call it <code>sides</code>) to compute the number in that changing statement, whatever value (of 3 or more) <code>sides</code> has? You may consult outside of your partnership on this issue, but think it through; don't just grab the answer.</p>
<p>Pick one of 2.29 or 2.30. Then pick one of 2.32, 2.33, 2.34, 2.35, or 2.36</p>
<p><strong>(e) </strong>Write a series of turtle graphics statements to draw an eye. You should have at least the basic eye shape with a pupil and an iris; feel free to make it as much fancier as you like (so long as it doesn't keep you from completing the rest of the assignment). Show your final results to your tutor and TA to impress them.</p>
<p><strong>(f)</strong> At the end of Chapter 3, do exercises 3.36, 3.43, and 3.32. (Exercise 3.32 can be done without an <code>if</code> statement, which we haven't covered yet, by using <code>max</code> and <code>min</code>.) For each function, put in your <code>lab2.py</code> file a few print statements that call the function with enough different values to demonstrate that it works correctly.  Until we get to <code>assert</code> statements, do this for every function you write for a lab assignment.</p>
<p>Do a simplified version of exercise 3.35 that computes and <em>returns</em> (not prints) only the distance between the two points.</p>
<p>Do exercise 3.44.</p>
<p><strong>(g) </strong>When we sort a list of items, we need a basis on which to compare the items to see whether one is bigger than another. If it's a list of numbers, Python just compares the numeric values; if it's a list of strings, Python compares the strings alphabetically. But what if we're sorting a list of restaurants? As we saw above, the <code>sort()</code> method uses the first field of a Restaurant object (in our case, its name) for comparison.  We call the basis of comparison the <strong>sort key</strong>. Wouldn't it be convenient if we could sort lists of complex objects based on some other sort key?</p>
<p><strong>(g.1)</strong> Write a function called <code>restaurant_price</code> that takes one argument, a Restaurant, and returns the value of the price field of that Restaurant. This is quite short and easy.</p>
<p><strong>(g.2)</strong> Write a sequence of statements that prints out the list of Restaurants <code>RC</code> in order from least expensive to most expensive (best dish).  [Hint: Use your <code>restaurant_price</code> function as an argument to a list method; see <code>help(list)</code> for details.] </p>
<p><strong>(g.3)</strong> Write a function called <code>costliest</code> that takes a list of Restaurants as its argument and returns the name of the highest-priced restaurant on that list.</p>
<p><strong>(h) </strong>Write a series of turtle graphics statements to draw a face, with a mouth, a nose, and two eyes. Use your eye-drawing code from part (e). But don't just copy those lines twice! Even if you use copy and paste to avoid tedious retyping, <strong>duplicate code</strong> is always a problem: It makes the program longer, and if you have to change it, you have to change every copy. If you skip changing one copy of the duplicate code, your program becomes an inconsistent mess. Happily, we've learned how to avoid writing duplicate code in this situation: We design a function called <code>draw_eye</code> to contain our eye-drawing code; then we call that function twice, once for each eye. But there's one more step, because we don't want to draw both eyes in the same place. Our <code>draw_eye</code> function needs a parameter that specifies the starting point for the drawing; then we can call it twice, one with a starting point offset from the other.</p>
<p>Write a function called <code>draw_face</code> that calls functions (that you also write) called <code>draw_eye</code>, <code>draw_nose</code>, and <code>draw_mouth</code>. Your nose and mouth don't have to be as fancy as your eyes. Include at least one call to <code>draw_face</code> in your <code>lab2.py</code> file.  
</p><p>(If you're feeling ambitious, parameterize other aspects of your feature-drawing functions so you can easily draw faces with different-color eyes, different-sized noses, and so on.)
</p><p><strong>(i)</strong><strong></strong> Remember that each partner must complete a partner evaluation form and submit it individually. Do this by connecting to eee.uci.edu and choosing the Survey tool for your lab section of ICS 31. Make sure you know your partner's name, first and last, so you can evaluate the right person. Please complete your evaluation by the end of the day on Friday, or Saturday morning at the latest. It only takes a couple of minutes and not doing it hurts your participation score.
  
</p><p><strong>What to turn in:</strong> Submit via Checkmate your  <code>lab2.py</code> file containing your solutions to parts (c) through (h). It would be an excellent idea to go back and re-read those parts carefully now, to make sure you've completed all the steps specified. It would also be an excellent idea to run your file one last time to make sure all the correct results appear, with no error messages.  (If you run into problems, it's probably because you have more than one function with the same name. Change one of the names [everywhere necessary] and try to Run again.)</p>
<p>Also remember that each student must complete a partner evaluation form by logging in to eee.uci.edu and selecting the Survey tool; these evaluations contribute to your class participation score. Get in the habit of doing this every week on Friday after you've submitted your assignment; the survey closes on Saturday.
  
</p><p style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; ">&nbsp;</p>
<p style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; "><font face="Helvetica" size="1">Written by David G. Kay in Fall 2012 for ICS 31.</font></p>
<br class="Apple-interchange-newline">
<hr>
<font><a href="http://www.ics.uci.edu/~kay/">David G. Kay</a>, <a href="mailto:kay@uci.edu">kay@uci.edu</a> </font><span><br>
<font size="2">
<!-- #BeginDate format:fcAm1a -->Sunday, October 7, 2012 0:26 AM<!-- #EndDate -->
</font></span>


<script type="text/javascript" src="./ICS 31 Lab 2_files/jquery.min.js"></script></body></html>