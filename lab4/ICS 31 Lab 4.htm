<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!-- saved from url=(0051)http://www.ics.uci.edu/~kay/courses/31/hw/lab4.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="GENERATOR" content="Globetrotter 1.1.1">
<meta http-equiv="UPDATED" content="Tuesday, November 22, 2005 9:30 AM">
<title>ICS 31 Lab 4</title>
<meta http-equiv="X-GLOBETROTTERDATA" content="33CB8976">
<meta http-equiv="DESCRIPTION" content="Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine.">
<meta http-equiv="COPYRIGHT" content="Copyright © 2001-2004 by David G. Kay.  All rights reserved.">
<link href="./ICS 31 Lab 4_files/mainstyle.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#FFFFFF">
<p><font size="2">ICS 31 • DAVID G. KAY • UC IRVINE • FALL 2012</font></p>
<p><font size="6"><b>Lab Assignment 4 </b></font>
</p>
<p><font>This assignment is due at the end of lab on Friday, October 26</font>. </p>
<p><font><strong>Preparation</strong></font> (Do this part individually, before coming to lab)</p>
<p><font><strong>(1)</strong> </font>Get your midterm back from your TA, review what you missed, and learn the concepts you didn't know before. Then take the midterm again for yourself: Cover up your answers and re-create them from scratch. (It's okay to skip the questions you answered correctly the first time, but it wouldn't hurt to do them again, either.) The topics on the midterm are fundamental; you'll have a hard time moving forward without mastering them. </p>
<p><strong>(2)</strong> Read the sections of Chapter 3 that you haven't read yet, particularly sections 3.4 and 3.6. Try the practice problems, especially 3.12 and 3.13 (before looking at the solutions). At <a href="http://www.pythontutor.com/">www.pythontutor.com</a> you can run simple Python code and see the values change in memory; it may be helpful for probems 3.12 and 3.13.</p>
<p><strong>(3)</strong> Do at least four of the parts of Exercise 3.21. Go back and look at section 2.4 to remind yourself how the range function works. This is a key programming skill, to be able to read a description of a langauge feature and then use it correctly.</p>
<p><strong>(4) </strong>If you're planning to use your own computer for some of your lab work, download the complete <a href="http://www.ics.uci.edu/~kay/python/RP0.py">first version of the restaurants program</a>, save it on your computer, and run it to make sure it works in your environment. You don't want to waste lab time on this.</p>
<p>&nbsp;</p>
<p><font><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>
<p><strong>(a)</strong> Choose a partner for this assignment and make sure the TA knows who your partner is. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. </p>
<p>Note that doing these problems by yourself, at home, is not pair programming and will not receive full credit (at least for participation). It's great if you want to work outside of lab, but whatever you prepare alone you must explain to your partner so that he or she understands it as well as you do. (This is to your benefit as well as your partner's: One of the most common workplace situations (and not just in science and technology) is to bring a co-worker up to speed on some project.)</p>
<p><strong>(b)</strong> 
Prepare your <code>lab4.py</code> file as in previous labs, including a line like this: </p>
<pre> #  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 4.
</pre>
<p>All the Python code you write for this assignment (except the restaurants program, which you will save and submit in a separate file) should be executable (i.e., not commented out) in your <code>lab4.py</code> file and should produce the correct results when you (and the TA) run the file. We can't give you credit for code that doesn't run and produce the correct results. Unlike on exams, on lab assignments there's rarely partial credit for partially working code because you have the ability to test it out and refine it until it does work correctly.</p>
<p><strong>(c)</strong> Do problems 3.25 and 3.26. </p>
<p><strong>(d)</strong> Let's define a Dish (that might be served at a restaurant) with three fields: a string for the name of the dish, a number for its price, and (in keeping with new labeling rules) a number for the number of calories in the dish. </p>
<p><strong>(d.1)</strong> Define a namedtuple for representing dishes like this and create three actual Dish objects (just assign them to variables named <code>d1</code>, <code>d2</code>, and <code>d3</code>).</p>
<p><strong>(d.2)</strong> Write a function called <code>Dish_str</code> that takes a Dish and returns a string in this form:</p>
<p><code>Paht Woon Sen ($9.50): 330 cal</code></p>
<p>(You don't have to format the dollar amount perfectly at this point.)</p>
<p><strong>(d.3) </strong>Write a function called <code>Dish_same</code> that takes two dishes as arguments and returns True if the names of the two dishes and their calorie counts are equal (and False otherwise). </p>
<p>Write some tests using <code>assert</code> statements (perhaps including <code>d1</code>, <code>d2</code>, and <code>d3</code>); they should include calls with two identical dishes, two dishes that are the same except for their price, two dishes that differ in their names, calorie counts, or both. Of course your tests should be included in your <code>lab4.py</code> file, and of course you should have tests like this for every function you write, except maybe the ones that print instead of returning a vaue. Coming up with thorough tests is another programming skill. Some people enjoy trying to "break" software; the become software quality assurance (testing) experts.</p>
<p><strong>(d.4)</strong> Write a function called <code>Dish_change_price</code> that takes a Dish and a number and returns a Dish that's the same as the parameter except that its price is changed as follows:  The number (positive or negative) represents a percentage change in price (so that 100 would double the price and –50 would cut it in half. (This may be a problem like the overtime pay problem; it may require you to think a little about the arithmetic you need to compute this result. Figure it out before you write any code.)</p>
<p><strong>(d.5)</strong> Write a function called <code>Dish_is_cheap</code> that takes a Dish and a number and returns True if the Dish's price is less than that number (and False otherwise).</p>
<p><strong>(d.6)</strong> Now create a list called <code>DL</code> of at least five Dish objects. Play around with this list in the shell for a minute or two (take its length, sort it, append another Dish to the end) to make sure it works as you expect. Next create another list called <code>DL2</code> that contains at least four dish objects. Then create one big list by extending <code>DL</code> with <code>DL2</code>. (Note the difference between the <code>append()</code> method and the <code>extend()</code> method; take a minute to be sure.)</p>
<p>Write a function called <code>Dishlist_display</code> that takes a list of Dishes and returns one large string consisting of the string representation of each dish followed by a newline (<code>'\n'</code>) character. Write some tests, as usual. Then use a print statement to print the string representation of all the dishes in the big list you created above.</p>
<p><strong>(d.7)</strong> Write a function called <code>Dishlist_all_cheap</code> that takes a list of Dishes note how this is different from <code>Dish_is_cheap</code>) and a number and returns True if the price of every dish on the list is less than that number. It should go without saying that <code>Dishlist_all_cheap</code> will call <code>Dish_is_cheap</code>;  solutions that duplicate the code instead of using an already-defined function would receive little credit.</p>
<p><strong>(d.8)</strong> Write a  function called <code>Dishlist_change_price</code> that takes a list of Dishes and a number representing a percentage change and returns the list of Dishes with each price changed by the specified amount. </p>
<p><strong>(d.9)</strong> Write a function called <code>Dishlist_prices</code> that takes a list of Dishes and returns a list of numbers containing just the prices of the dishes on that list.</p>
<p><strong>(d.10) </strong> Write a function called <code>Dishlist_average</code> that takes a list of Dishes and returns the average price of those dishes. (Again, call previously defined functions wherever possible; don't reinvent the wheel.</p>
<p><strong>(d.11)</strong> Write a function called <code>Dishlist_keep_cheap</code> that takes a list of Dishes and a number and returns a list of those dishes on the original list that have prices less than that number. This is much like keeping the consonants in a string.</p>
<p><strong>(d.12)</strong> Write a function called <code>before_and_after</code> that takes no parameters. It prompts the user for interactive input of a number representing a percentage change in prices; then it prints the result of <code>Dishlist_display</code> on the big list of restaurants you've already defined in your file; then it changes all the prices of the restaurants on the big list; then it prints the result of <code>Dishlist_display</code> again (reflecting the changed list of restaurants).</p>
<p><strong>(e)</strong> Copy the complete first version of the restaurants program to your lab machine (see the link above). Run it to make sure you've installed it correctly.</p>
<p>Now, try the  tasks described below with this advice in mind: When you modify large, unfamiliar programs, you want to be especially careful (i) to make and test only small changes at one time, (ii) to make your changes deliberately, with high confidence that they will work as intended, rather than just changing things haphazardly and hoping they'll work, and (iii) make each small set of changes on a new copy of the code, so if you have to "roll back" those changes you won't have far back to go because you'll have a copy of your most recent, stable version. It's easy to lose your way when navigating around a large program; these steps will help keep you on track.</p>
<p><strong>(e.1)</strong> Change the command for adding a new restaurant to <code>n</code> instead of <code>a</code>.  </p>
<p><strong>(e.2) </strong>Add an additional menu choice: </p>
<p><code>e: Remove (erase) all the restaurants from the collection</code></p>
<p>If the user types <code>e</code> and then <code>p</code>, for example, nothing would be printed. [This will require modifications or additions in a few places. You can do the main part of the work very easily indeed, with a single function call.] Test out your modified program interactively to satisfy yourself that it works as intended.</p>
<p><strong>(e.3) </strong>Add one new feature to the program: </p>
<p><code>c: Change prices for the dishes served</code></p>
<p>When the user types <code>c</code>, the program should ask the user for an amount representing a percentage change in price, as described above.. Then it should apply that price change to the prices for all the restaurants in the collection. [You should design this in the same way you designed it for Dishes. Write a separate <code>Restaurant_change_price</code> function, for example, and a <code>Collection_change_prices</code> function that you would call from <code>handle_commands</code>.]
</p>
<p><strong>(f)</strong> If you or your partner didn't finish Lab 3 and you have time available this week, work together to finish any problems that either of you left unfinished last week. You may use either partner's work from last week for reference, but of course the point is that both of you understand your solutions. This is more for experience and learning than for additional credit, but of course if you become more proficient, you will get higher scores on later assignments and exams.</p>
<p><strong>(g)</strong><strong></strong> Remember that each partner must complete a partner evaluation form and submit it individually. Do this by connecting to eee.uci.edu and choosing the Survey tool for your lab section of ICS 31. Make sure you know your partner's name, first and last, so you can evaluate the right person. Some students have been forgetting to specify their partner's name on the survey; from now on, if you forget your partner's name we won't give you credit for completing the evaluation. Please complete your evaluation by the end of the day on Friday, or Saturday morning at the latest. It only takes a couple of minutes and not doing it hurts your participation score.
  
</p><p><strong>What to turn in:</strong> Submit via Checkmate two files: your  <code>lab4.py</code> file containing your solutions to parts (c), (d), and (f), and a separate Python file containing your modified restaurants program from part (e). Remember what we've said in previous labs about rereading the assignment and rerunning your Python files.</p>
<p>Also remember that each student must complete a partner evaluation form by logging in to eee.uci.edu and selecting the Survey tool; these evaluations contribute to your class participation score. Get in the habit of doing this every week on Friday after you've submitted your assignment; the survey closes on Saturday.
</p><p style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; ">&nbsp;</p>
<p style="color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; "><font face="Helvetica" size="1">Written by David G. Kay in Fall 2012 for ICS 31, based in part on assignments from ICS H21 and Informatics 41.</font></p>
<br class="Apple-interchange-newline">
<hr>
<font><a href="http://www.ics.uci.edu/~kay/">David G. Kay</a>, <a href="mailto:kay@uci.edu">kay@uci.edu</a> </font><span><br>
<font size="2">
<!-- #BeginDate format:fcAm1a -->Saturday, October 20, 2012 4:56 PM<!-- #EndDate -->
</font></span>


</body></html>